{
  "address": "0xB11471C92665Ae1EFD4b67aE1533Ac342BF03c5C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "initialAddresses_",
          "type": "address[]"
        },
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        }
      ],
      "stateMutability": "payable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hash",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "judge",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "intendedSignatories",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "createdAt",
          "type": "uint32"
        }
      ],
      "name": "CreateContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "actionCalledBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc20Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ERC20SentToBeneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "actionCalledBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "erc721ContractAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ERC721SentToBeneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hash",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "timestamp",
          "type": "uint32"
        }
      ],
      "name": "NewEscrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundsInwei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ReceivedFunds",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "actionCalledBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fundsInwei",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SentToBeneficiary",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "hash",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "contractURI",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "signedAt",
          "type": "uint32"
        }
      ],
      "name": "SignContract",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allEscrows",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseURI_",
          "type": "string"
        }
      ],
      "name": "changeBaseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "contractURI_",
          "type": "string"
        }
      ],
      "name": "changeContractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrowContractAddress",
          "type": "address"
        }
      ],
      "name": "changeEscrowContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_feesPermyriad",
          "type": "uint8"
        }
      ],
      "name": "changeFeesPermyriad",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasuryAddress",
          "type": "address"
        }
      ],
      "name": "changeTreasuryAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_contractURI",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "_intendedSignatories",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_judge",
          "type": "address"
        }
      ],
      "name": "createContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_escrowWalletAddress",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "escrowContractAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feesPermyriad",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fetchAllEscrows",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_signerAddress",
          "type": "address"
        }
      ],
      "name": "fetchEscrowAddressesBySignerAddress",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_escrowAddressesBySignerAddress",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrowAddress",
          "type": "address"
        }
      ],
      "name": "fetchTokenIdsByEscrowAddress",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_tokenIds",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getContractSignerByTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getEscrowAddressByTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getEscrowAddressesBySignerAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getRoyaltyInfoByTokenId",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "getTokenIdsByEscrowAddress",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasSignedContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenID",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc20address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenAmount",
          "type": "uint256"
        }
      ],
      "name": "sendERC20ToBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_erc721address",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "sendERC721ToBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountInWei",
          "type": "uint256"
        }
      ],
      "name": "sendToBeneficiary",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_success",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_escrowWalletAddress",
          "type": "address"
        }
      ],
      "name": "signContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalTokensMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasuryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xc668278f17e7cb15f5b53798652f37572eccf755d7c7704efe5353b69d61e859",
  "receipt": {
    "to": null,
    "from": "0xAf4e332DE0323Ad04fdaCe8e3E8FEC31FbAbB7F4",
    "contractAddress": "0xB11471C92665Ae1EFD4b67aE1533Ac342BF03c5C",
    "transactionIndex": 6,
    "gasUsed": "3551634",
    "logsBloom": "0x
    "blockHash": "0x9e4ef887b30272c5edc19ecf1a2257d4b6da3a76684e6ec4f8b727112d0cf18c",
    "transactionHash": "0xc668278f17e7cb15f5b53798652f37572eccf755d7c7704efe5353b69d61e859",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 8163418,
        "transactionHash": "0xc668278f17e7cb15f5b53798652f37572eccf755d7c7704efe5353b69d61e859",
        "address": "0xB11471C92665Ae1EFD4b67aE1533Ac342BF03c5C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000af4e332de0323ad04fdace8e3e8fec31fbabb7f4"
        ],
        "data": "0x",
        "logIndex": 39,
        "blockHash": "0x9e4ef887b30272c5edc19ecf1a2257d4b6da3a76684e6ec4f8b727112d0cf18c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 8163418,
        "transactionHash": "0xc668278f17e7cb15f5b53798652f37572eccf755d7c7704efe5353b69d61e859",
        "address": "0xB11471C92665Ae1EFD4b67aE1533Ac342BF03c5C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x000000000000000000000000af4e332de0323ad04fdace8e3e8fec31fbabb7f4",
          "0x000000000000000000000000af4e332de0323ad04fdace8e3e8fec31fbabb7f4"
        ],
        "data": "0x",
        "logIndex": 40,
        "blockHash": "0x9e4ef887b30272c5edc19ecf1a2257d4b6da3a76684e6ec4f8b727112d0cf18c"
      },
      {
        "transactionIndex": 6,
        "blockNumber": 8163418,
        "transactionHash": "0xc668278f17e7cb15f5b53798652f37572eccf755d7c7704efe5353b69d61e859",
        "address": "0xB11471C92665Ae1EFD4b67aE1533Ac342BF03c5C",
        "topics": [
          "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000af4e332de0323ad04fdace8e3e8fec31fbabb7f4",
          "0x0000000000000000000000000000000000000000000000000000000000000000"
        ],
        "data": "0x",
        "logIndex": 41,
        "blockHash": "0x9e4ef887b30272c5edc19ecf1a2257d4b6da3a76684e6ec4f8b727112d0cf18c"
      }
    ],
    "blockNumber": 8163418,
    "cumulativeGasUsed": "5105473",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Judiciary",
    "CONTRACT",
    [
      "0xAf4e332DE0323Ad04fdaCe8e3E8FEC31FbAbB7F4",
      "0x37B55FFFbcABcAb694a2e1585792747c30865754",
      "0xAf4e332DE0323Ad04fdaCe8e3E8FEC31FbAbB7F4"
    ],
    "https://judiciary.app/contractURI.json"
  ],
  "numDeployments": 2,
  "solcInputHash": "cafde215a7ce4fadadfb2421812ba6ad",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"initialAddresses_\",\"type\":\"address[]\"},{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"stateMutability\":\"payable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hash\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"judge\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"intendedSignatories\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"createdAt\",\"type\":\"uint32\"}],\"name\":\"CreateContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actionCalledBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc20Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ERC20SentToBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actionCalledBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"erc721ContractAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ERC721SentToBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hash\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"timestamp\",\"type\":\"uint32\"}],\"name\":\"NewEscrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsInwei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ReceivedFunds\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"actionCalledBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fundsInwei\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SentToBeneficiary\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"hash\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"contractURI\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"signedAt\",\"type\":\"uint32\"}],\"name\":\"SignContract\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allEscrows\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseURI_\",\"type\":\"string\"}],\"name\":\"changeBaseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"contractURI_\",\"type\":\"string\"}],\"name\":\"changeContractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrowContractAddress\",\"type\":\"address\"}],\"name\":\"changeEscrowContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_feesPermyriad\",\"type\":\"uint8\"}],\"name\":\"changeFeesPermyriad\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasuryAddress\",\"type\":\"address\"}],\"name\":\"changeTreasuryAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_contractURI\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"_intendedSignatories\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_judge\",\"type\":\"address\"}],\"name\":\"createContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_escrowWalletAddress\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"escrowContractAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feesPermyriad\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fetchAllEscrows\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_signerAddress\",\"type\":\"address\"}],\"name\":\"fetchEscrowAddressesBySignerAddress\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_escrowAddressesBySignerAddress\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrowAddress\",\"type\":\"address\"}],\"name\":\"fetchTokenIdsByEscrowAddress\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_tokenIds\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getContractSignerByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getEscrowAddressByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getEscrowAddressesBySignerAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getRoyaltyInfoByTokenId\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"getTokenIdsByEscrowAddress\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasSignedContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc20address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"sendERC20ToBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_erc721address\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"sendERC721ToBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountInWei\",\"type\":\"uint256\"}],\"name\":\"sendToBeneficiary\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_success\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_escrowWalletAddress\",\"type\":\"address\"}],\"name\":\"signContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasuryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"hey@kumareth.com\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"changeFeesPermyriad(uint8)\":{\"params\":{\"_feesPermyriad\":\"Range: 0-255 (0.00% - 2.55%)\"},\"returns\":{\"_success\":\"Boolean to indicate if the fees were changed successfully\"}},\"changeTreasuryAddress(address)\":{\"params\":{\"_treasuryAddress\":\"Any address that is non-zero\"},\"returns\":{\"_success\":\"Boolean to indicate if the fees were changed successfully\"}},\"constructor\":{\"details\":\"Constructor function for the Judiciary ERC721 Contract\",\"params\":{\"contractURI_\":\"URL of Json metadata for this Contract\",\"initialAddresses_\":\"Address of the Owner Contract that manages Permissions.\",\"name_\":\"Name of the Judiciary artifact Collection\",\"symbol_\":\"Symbol for the Judiciary NFTs\"}},\"createContract(string,address[],address)\":{\"params\":{\"_contractURI\":\"URL of the JSON metadata for the Contract (can be IPFS hash)\",\"_intendedSignatories\":\"Array of addresses of the intended signatories\",\"_judge\":\"Address of the judge who can resolve the contract related dispute\"},\"returns\":{\"_escrowWalletAddress\":\"Address of the Escrow Wallet created for the contract\",\"_tokenId\":\"Token ID of the NFT created\"}},\"fetchEscrowAddressesBySignerAddress(address)\":{\"details\":\"returns an array of escrowAddresses for the given signerAddress\",\"params\":{\"_signerAddress\":\"Address of the Signer\"},\"returns\":{\"_escrowAddressesBySignerAddress\":\"Array of Escrow Addresses\"}},\"fetchTokenIdsByEscrowAddress(address)\":{\"details\":\"returns an array of tokenIds for the given escrowAddress\",\"params\":{\"_escrowAddress\":\"Address of the Escrow Wallet\"},\"returns\":{\"_tokenIds\":\"Array of Token IDs\"}},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"can be used by other contracts to get royaltyInfo\",\"params\":{\"_salePrice\":\"Desired Sale Price of the token to run calculations on\",\"_tokenID\":\"Token ID of which royaltyInfo is to be fetched\"},\"returns\":{\"receiver\":\"Address of the receiver of the royalties\",\"royaltyAmount\":\"Royalty Amount\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"sendERC20ToBeneficiary(address,uint256)\":{\"details\":\"Sends ERC20 tokens the Contract might own, to the Beneficiary\",\"params\":{\"_erc20address\":\"Address of the ERC20 Contract\",\"_tokenAmount\":\"Token Amount you think the Contract has, that you want to send to the Beneficiary\"},\"returns\":{\"_success\":\"Whether the transaction was successful or not\"}},\"sendERC721ToBeneficiary(address,uint256)\":{\"details\":\"Sends ERC721 tokens the Contract might own, to the Beneficiary\",\"params\":{\"_erc721address\":\"Address of the ERC721 Contract\",\"_tokenId\":\"ID of the Token you wish to send to the Beneficiary.\"},\"returns\":{\"_success\":\"Whether the transaction was successful or not\"}},\"sendToBeneficiary(uint256)\":{\"details\":\"Sends Wei the Contract might own, to the Beneficiary\",\"params\":{\"_amountInWei\":\"Amount in Wei you think the Contract has, that you want to send to the Beneficiary\"},\"returns\":{\"_success\":\"Whether the transaction was successful or not\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"signContract(address)\":{\"params\":{\"_escrowWalletAddress\":\"Address of the Escrow Wallet associated to the contract that you want to sign\"},\"returns\":{\"_tokenId\":\"Token ID of the NFT created\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"Judiciary Contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"changeFeesPermyriad(uint8)\":{\"notice\":\"For the owner to change the fees (fees can never exceed 2.55%, range: 0-255)\"},\"changeTreasuryAddress(address)\":{\"notice\":\"For the owner to change the treasuryAddress\"},\"constructor\":{\"notice\":\"Constructor function for the Judiciary Contract\"},\"createContract(string,address[],address)\":{\"notice\":\"Create a new Judiciary Contract\"},\"fetchEscrowAddressesBySignerAddress(address)\":{\"notice\":\"returns escrowAddresses for the given signerAddress\"},\"fetchTokenIdsByEscrowAddress(address)\":{\"notice\":\"returns tokenIds for the given escrowAddress\"},\"fund()\":{\"notice\":\"To pay the contract\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"returns royalties info for the given Token ID\"},\"sendERC20ToBeneficiary(address,uint256)\":{\"notice\":\"So the Admins can maintain control over all the Tokens this NFT Contract might accidentally own in future (to refund lost tokens, etc.)\"},\"sendERC721ToBeneficiary(address,uint256)\":{\"notice\":\"So the Admins can maintain control over all the ERC721 Tokens this NFT Contract might accidentally own in future (to refund lost NFTs, etc.)\"},\"sendToBeneficiary(uint256)\":{\"notice\":\"So the Admins can maintain control over all the Funds this NFT Contract might accidentally own in future (to refund lost funds, etc.)\"},\"signContract(address)\":{\"notice\":\"Sign a Judiciary Contract\"}},\"notice\":\"This contract shall be the prime Judiciary NFT contract for creation of contracts in the Metaverse!\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Judiciary.sol\":\"Judiciary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":466},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/EscrowFactory.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ninterface IEscrow {\\n    function initialize(\\n        address[] memory _participants,\\n        address _judge,\\n        bool _blockNewParticipants\\n    ) external;\\n\\n    function getParticipants()\\n        external\\n        view\\n        returns (address[] memory _participants);\\n\\n    function totalParticipants()\\n        external\\n        view\\n        returns (uint256 _totalParticipants);\\n\\n    function deposit(\\n        address _to,\\n        address _token,\\n        uint256 _amount\\n    ) external payable;\\n}\\n\\n/**\\n * @title The Escrow Factory Contract\\n * @author hey@kumareth.com\\n * @notice This is the factory that creates the Escrow instances\\n */\\ncontract EscrowFactory is Ownable {\\n    address public escrowContractAddress;\\n    address[] public allEscrows;\\n\\n    event NewEscrow(\\n        address indexed hash,\\n        address indexed creator,\\n        uint32 timestamp\\n    );\\n\\n    constructor(address _escrowContractAddress) {\\n        escrowContractAddress = _escrowContractAddress;\\n    }\\n\\n    function _clone() internal returns (address result) {\\n        bytes20 targetBytes = bytes20(escrowContractAddress);\\n\\n        //-> learn more: https://coinsbench.com/minimal-proxy-contracts-eip-1167-9417abf973e3 & https://medium.com/coinmonks/diving-into-smart-contracts-minimal-proxy-eip-1167-3c4e7f1a41b8\\n        assembly {\\n            let clone := mload(0x40)\\n            mstore(\\n                clone,\\n                0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000\\n            )\\n            mstore(add(clone, 0x14), targetBytes)\\n            mstore(\\n                add(clone, 0x28),\\n                0x5af43d82803e903d91602b57fd5bf30000000000000000000000000000000000\\n            )\\n            result := create(0, clone, 0x37)\\n        }\\n\\n        require(result != address(0), \\\"ERC1167: clone failed\\\");\\n    }\\n\\n    function _createEscrow(\\n        address[] memory _participants,\\n        address _judge,\\n        bool _blockNewParticipants\\n    ) internal returns (address result) {\\n        address proxy = _clone();\\n        allEscrows.push(proxy);\\n        IEscrow(proxy).initialize(_participants, _judge, _blockNewParticipants);\\n        emit NewEscrow(proxy, msg.sender, uint32(block.timestamp));\\n        return proxy;\\n    }\\n\\n    function changeEscrowContractAddress(address _escrowContractAddress)\\n        external\\n        onlyOwner\\n        returns (address)\\n    {\\n        escrowContractAddress = _escrowContractAddress;\\n        return _escrowContractAddress;\\n    }\\n\\n    function fetchAllEscrows() external view returns (address[] memory) {\\n        return allEscrows;\\n    }\\n}\\n\",\"keccak256\":\"0x026249ab4fdbeab067f2e342463dfed426618f7910d67318815f3ab9c6322cec\",\"license\":\"ISC\"},\"contracts/Judiciary.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./utils/NFT.sol\\\";\\nimport \\\"./EscrowFactory.sol\\\";\\n\\n/**\\n * @title Judiciary Contract\\n * @author hey@kumareth.com\\n * @notice This contract shall be the prime Judiciary NFT contract for creation of contracts in the Metaverse!\\n */\\ncontract Judiciary is NFT, EscrowFactory, ReentrancyGuard {\\n    /**\\n     * @notice Constructor function for the Judiciary Contract\\n     * @dev Constructor function for the Judiciary ERC721 Contract\\n     * @param name_ Name of the Judiciary artifact Collection\\n     * @param symbol_ Symbol for the Judiciary NFTs\\n     * @param initialAddresses_ Address of the Owner Contract that manages Permissions.\\n     * @param contractURI_ URL of Json metadata for this Contract\\n     */\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        address[] memory initialAddresses_, // [ address ownerAddress, address escrowContractAddress, address treasuryAddress ]\\n        string memory contractURI_\\n    )\\n        payable\\n        NFT(name_, symbol_, contractURI_)\\n        EscrowFactory(initialAddresses_[1])\\n    {\\n        _transferOwnership(initialAddresses_[0]);\\n        escrowContractAddress = initialAddresses_[1];\\n        treasuryAddress = initialAddresses_[2];\\n\\n        // create a fake genesis NFT (so tokenIds start with 1)\\n        _safeMint(msg.sender, 0);\\n    }\\n\\n    // constants\\n    address public treasuryAddress;\\n    uint8 public feesPermyriad = 255;\\n\\n    // token IDs counter\\n    using Counters for Counters.Counter;\\n    Counters.Counter public totalTokensMinted;\\n\\n    // mappings\\n    mapping(address => uint256[]) public getTokenIdsByEscrowAddress;\\n    mapping(uint256 => address) public getEscrowAddressByTokenId;\\n    mapping(uint256 => address) public getContractSignerByTokenId;\\n    mapping(address => address[]) public getEscrowAddressesBySignerAddress;\\n    mapping(address => mapping(address => bool)) public hasSignedContract; // [escrowAddress][signerAddress] => true/false\\n\\n    /**\\n     * @notice returns escrowAddresses for the given signerAddress\\n     * @dev returns an array of escrowAddresses for the given signerAddress\\n     * @param _signerAddress Address of the Signer\\n     * @return _escrowAddressesBySignerAddress Array of Escrow Addresses\\n     */\\n    function fetchEscrowAddressesBySignerAddress(address _signerAddress)\\n        external\\n        view\\n        returns (address[] memory _escrowAddressesBySignerAddress)\\n    {\\n        return getEscrowAddressesBySignerAddress[_signerAddress];\\n    }\\n\\n    /**\\n     * @notice returns tokenIds for the given escrowAddress\\n     * @dev returns an array of tokenIds for the given escrowAddress\\n     * @param _escrowAddress Address of the Escrow Wallet\\n     * @return _tokenIds Array of Token IDs\\n     */\\n    function fetchTokenIdsByEscrowAddress(address _escrowAddress)\\n        external\\n        view\\n        returns (uint256[] memory _tokenIds)\\n    {\\n        return getTokenIdsByEscrowAddress[_escrowAddress];\\n    }\\n\\n    // See EIP-2981 for more information: https://eips.ethereum.org/EIPS/eip-2981\\n    struct RoyaltyInfo {\\n        address receiver;\\n        uint256 percent; // it's actually a permyriad (parts per ten thousand)\\n    }\\n    mapping(uint256 => RoyaltyInfo) public getRoyaltyInfoByTokenId;\\n\\n    /**\\n     * @notice returns royalties info for the given Token ID\\n     * @dev can be used by other contracts to get royaltyInfo\\n     * @param _tokenID Token ID of which royaltyInfo is to be fetched\\n     * @param _salePrice Desired Sale Price of the token to run calculations on\\n     * @return receiver Address of the receiver of the royalties\\n     * @return royaltyAmount Royalty Amount\\n     */\\n    function royaltyInfo(uint256 _tokenID, uint256 _salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        RoyaltyInfo memory rInfo = getRoyaltyInfoByTokenId[_tokenID];\\n        if (rInfo.receiver == address(0)) return (address(0), 0);\\n        uint256 amount = (_salePrice * rInfo.percent) / 10000;\\n        return (payable(rInfo.receiver), amount);\\n    }\\n\\n    // Events\\n    event CreateContract(\\n        address indexed hash,\\n        address indexed creator,\\n        address indexed judge,\\n        address[] intendedSignatories,\\n        uint32 createdAt\\n    );\\n    event SignContract(\\n        address indexed hash,\\n        address indexed signer,\\n        string indexed contractURI,\\n        uint32 signedAt\\n    );\\n\\n    /**\\n     * @dev Internal function used to handle any Escrow payment (manages fee collection)\\n     * @param _escrowWalletAddress Address of the Escrow Wallet\\n     */\\n    function _pay(address _escrowWalletAddress) internal {\\n        if (msg.value > 0) {\\n            require(\\n                IEscrow(_escrowWalletAddress).totalParticipants() <= 2,\\n                \\\"cannot directly deposit\\\"\\n            );\\n            IEscrow(_escrowWalletAddress).deposit{value: msg.value}(\\n                address(0),\\n                _escrowWalletAddress,\\n                msg.value\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function used to create the Judiciary NFT that represents signed contract\\n     * @param _receiver Address of the receiver of the NFT\\n     * @param _escrowWalletAddress Address of the Escrow Wallet\\n     * @param _tokenURI URL of the JSON metadata for the NFT\\n     * @return _tokenId Token ID of the NFT created\\n     */\\n    function _createNFT(\\n        address _receiver,\\n        address _escrowWalletAddress,\\n        string memory _tokenURI\\n    ) internal returns (uint256 _tokenId) {\\n        totalTokensMinted.increment();\\n        uint256 tokenId = totalTokensMinted.current();\\n        _safeMint(_receiver, tokenId);\\n        _setTokenURI(tokenId, _tokenURI);\\n\\n        getTokenIdsByEscrowAddress[_escrowWalletAddress].push(tokenId);\\n        getEscrowAddressByTokenId[tokenId] = _escrowWalletAddress;\\n        getContractSignerByTokenId[tokenId] = _receiver;\\n        getEscrowAddressesBySignerAddress[_receiver].push(_escrowWalletAddress);\\n\\n        hasSignedContract[_escrowWalletAddress][_receiver] = true;\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice Create a new Judiciary Contract\\n     * @param _contractURI URL of the JSON metadata for the Contract (can be IPFS hash)\\n     * @param _intendedSignatories Array of addresses of the intended signatories\\n     * @param _judge Address of the judge who can resolve the contract related dispute\\n     * @return _tokenId Token ID of the NFT created\\n     * @return _escrowWalletAddress Address of the Escrow Wallet created for the contract\\n     */\\n    function createContract(\\n        string memory _contractURI,\\n        address[] memory _intendedSignatories,\\n        address _judge\\n    ) public payable returns (uint256 _tokenId, address _escrowWalletAddress) {\\n        // contract uri cannot be empty\\n        require(bytes(_contractURI).length > 0, \\\"empty contract uri\\\");\\n\\n        // create escrow wallet\\n        address escrowWalletAddress = _createEscrow(\\n            _intendedSignatories,\\n            _judge,\\n            true\\n        );\\n\\n        // send payment to the newly created escrow wallet\\n        _pay(escrowWalletAddress);\\n\\n        // mint a token to msg.sender if the msg.sender is in _intendedSignatories\\n        uint256 tokenId;\\n        for (uint256 i = 0; i < _intendedSignatories.length; i++) {\\n            if (msg.sender == _intendedSignatories[i]) {\\n                tokenId = _createNFT(\\n                    _intendedSignatories[i],\\n                    escrowWalletAddress,\\n                    _contractURI\\n                );\\n\\n                emit SignContract(\\n                    _escrowWalletAddress,\\n                    msg.sender,\\n                    _contractURI,\\n                    uint32(block.timestamp)\\n                );\\n\\n                break;\\n            }\\n        }\\n\\n        emit CreateContract(\\n            escrowWalletAddress,\\n            msg.sender,\\n            _judge,\\n            _intendedSignatories,\\n            uint32(block.timestamp)\\n        );\\n\\n        return (tokenId, escrowWalletAddress);\\n    }\\n\\n    /**\\n     * @notice Sign a Judiciary Contract\\n     * @param _escrowWalletAddress Address of the Escrow Wallet associated to the contract that you want to sign\\n     * @return _tokenId Token ID of the NFT created\\n     */\\n    function signContract(address _escrowWalletAddress)\\n        external\\n        payable\\n        returns (uint256 _tokenId)\\n    {\\n        // get the participants from the escrowWalletAddress (Escrow.sol)\\n        address[] memory participants = IEscrow(payable(_escrowWalletAddress))\\n            .getParticipants();\\n\\n        // send payment to the escrow wallet\\n        _pay(_escrowWalletAddress);\\n\\n        // get contractURI from tokenID that is associated with the escrowWalletAddress\\n        uint256 formerTokenId = getTokenIdsByEscrowAddress[\\n            _escrowWalletAddress\\n        ][0];\\n        string memory contractURI = tokenURI(formerTokenId);\\n\\n        // check if the msg.sender has already signed the contract\\n        require(\\n            hasSignedContract[_escrowWalletAddress][msg.sender] != true,\\n            \\\"already signed\\\"\\n        );\\n\\n        // mint a token to msg.sender if the msg.sender is in participants\\n        uint256 tokenId;\\n        for (uint256 i = 0; i < participants.length; i++) {\\n            if (msg.sender == participants[i]) {\\n                tokenId = _createNFT(\\n                    participants[i],\\n                    _escrowWalletAddress,\\n                    contractURI\\n                );\\n                break;\\n            }\\n        }\\n\\n        emit SignContract(\\n            _escrowWalletAddress,\\n            msg.sender,\\n            contractURI,\\n            uint32(block.timestamp)\\n        );\\n\\n        return tokenId;\\n    }\\n\\n    /**\\n     * @notice For the owner to change the fees (fees can never exceed 2.55%, range: 0-255)\\n     * @param _feesPermyriad Range: 0-255 (0.00% - 2.55%)\\n     * @return _success Boolean to indicate if the fees were changed successfully\\n     */\\n    function changeFeesPermyriad(uint8 _feesPermyriad)\\n        external\\n        onlyOwner\\n        returns (bool _success)\\n    {\\n        feesPermyriad = _feesPermyriad;\\n        return true;\\n    }\\n\\n    /**\\n     * @notice For the owner to change the treasuryAddress\\n     * @param _treasuryAddress Any address that is non-zero\\n     * @return _success Boolean to indicate if the fees were changed successfully\\n     */\\n    function changeTreasuryAddress(address _treasuryAddress)\\n        external\\n        onlyOwner\\n        returns (bool _success)\\n    {\\n        require(_treasuryAddress != address(0));\\n        treasuryAddress = _treasuryAddress;\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x6a1f84f2a4ac2e4bd9edd130747570c76b59d2b923346dd1d65448b681d73763\",\"license\":\"ISC\"},\"contracts/utils/NFT.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\n\\nimport \\\"./Payable.sol\\\";\\n\\n/**\\n * @title NFT Contract\\n * @author hey@kumareth.com\\n * @notice An ERC721 Inheritable Contract with many features (like, ERC721Enumerable, accepting payments, admin ability to transfer tokens, etc.)\\n */\\nabstract contract NFT is ERC721Enumerable, Payable {\\n    constructor(\\n        string memory name_,\\n        string memory symbol_,\\n        string memory contractURI_\\n    ) ERC721(name_, symbol_) {\\n        _contractURI = contractURI_;\\n    }\\n\\n    // Base URI Management\\n    string public baseURI = \\\"\\\"; //-> could have been \\\"https://Judiciary.app/artifacts/\\\"\\n\\n    function _baseURI()\\n        internal\\n        view\\n        virtual\\n        override(ERC721)\\n        returns (string memory)\\n    {\\n        return baseURI;\\n    }\\n\\n    function changeBaseURI(string memory baseURI_)\\n        public\\n        onlyOwner\\n        returns (string memory)\\n    {\\n        baseURI = baseURI_;\\n        return baseURI;\\n    }\\n\\n    // Contract URI Management\\n    string _contractURI = \\\"\\\";\\n\\n    function contractURI() public view returns (string memory) {\\n        return _contractURI;\\n    }\\n\\n    function changeContractURI(string memory contractURI_)\\n        public\\n        onlyOwner\\n        returns (string memory)\\n    {\\n        _contractURI = contractURI_;\\n        return contractURI_;\\n    }\\n\\n    // Exists\\n    function exists(uint256 tokenId) public view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    // URI Storage Management\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    function tokenURI(uint256 tokenId)\\n        public\\n        view\\n        virtual\\n        override\\n        returns (string memory)\\n    {\\n        require(_exists(tokenId), \\\"URI query for nonexistent token\\\");\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI)\\n        internal\\n        virtual\\n    {\\n        require(_exists(tokenId), \\\"URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n}\\n\",\"keccak256\":\"0xad23993c3b6748d4e53862c600b2a639c02ea1b20744193eda8f1ad6b073d373\",\"license\":\"ISC\"},\"contracts/utils/Payable.sol\":{\"content\":\"// SPDX-License-Identifier: ISC\\npragma solidity >=0.4.22 <0.9.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n/**\\n * @title Payable Contract\\n * @author hey@kumareth.com\\n * @notice If this abstract contract is inherited, the Contract becomes payable, it also allows Admins to manage Assets owned by the Contract.\\n */\\nabstract contract Payable is Ownable {\\n    // Events\\n    event ReceivedFunds(\\n        address indexed by,\\n        uint256 fundsInwei,\\n        uint256 timestamp\\n    );\\n    event SentToBeneficiary(\\n        address indexed actionCalledBy,\\n        address indexed beneficiary,\\n        uint256 fundsInwei,\\n        uint256 timestamp\\n    );\\n    event ERC20SentToBeneficiary(\\n        address indexed actionCalledBy,\\n        address indexed beneficiary,\\n        address indexed erc20Token,\\n        uint256 tokenAmount,\\n        uint256 timestamp\\n    );\\n    event ERC721SentToBeneficiary(\\n        address indexed actionCalledBy,\\n        address indexed beneficiary,\\n        address indexed erc721ContractAddress,\\n        uint256 tokenId,\\n        uint256 timestamp\\n    );\\n\\n    /// @notice To pay the contract\\n    function fund() external payable {\\n        emit ReceivedFunds(msg.sender, msg.value, block.timestamp);\\n    }\\n\\n    // Fallbacks\\n    fallback() external payable virtual {\\n        emit ReceivedFunds(msg.sender, msg.value, block.timestamp);\\n    }\\n\\n    receive() external payable virtual {\\n        emit ReceivedFunds(msg.sender, msg.value, block.timestamp);\\n    }\\n\\n    function getBalance() public view returns (uint256) {\\n        return address(this).balance;\\n    }\\n\\n    /**\\n     * @notice So the Admins can maintain control over all the Funds this NFT Contract might accidentally own in future (to refund lost funds, etc.)\\n     * @dev Sends Wei the Contract might own, to the Beneficiary\\n     * @param _amountInWei Amount in Wei you think the Contract has, that you want to send to the Beneficiary\\n     * @return _success Whether the transaction was successful or not\\n     */\\n    function sendToBeneficiary(uint256 _amountInWei)\\n        external\\n        onlyOwner\\n        returns (bool _success)\\n    {\\n        (bool success, ) = payable(owner()).call{value: _amountInWei}(\\\"\\\");\\n        require(success, \\\"Transfer to Beneficiary failed.\\\");\\n\\n        emit SentToBeneficiary(\\n            msg.sender,\\n            owner(),\\n            _amountInWei,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice So the Admins can maintain control over all the Tokens this NFT Contract might accidentally own in future (to refund lost tokens, etc.)\\n     * @dev Sends ERC20 tokens the Contract might own, to the Beneficiary\\n     * @param _erc20address Address of the ERC20 Contract\\n     * @param _tokenAmount Token Amount you think the Contract has, that you want to send to the Beneficiary\\n     * @return _success Whether the transaction was successful or not\\n     */\\n    function sendERC20ToBeneficiary(address _erc20address, uint256 _tokenAmount)\\n        external\\n        onlyOwner\\n        returns (bool _success)\\n    {\\n        IERC20 erc20Token;\\n        erc20Token = IERC20(_erc20address);\\n\\n        erc20Token.transfer(owner(), _tokenAmount);\\n\\n        emit ERC20SentToBeneficiary(\\n            msg.sender,\\n            owner(),\\n            _erc20address,\\n            _tokenAmount,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @notice So the Admins can maintain control over all the ERC721 Tokens this NFT Contract might accidentally own in future (to refund lost NFTs, etc.)\\n     * @dev Sends ERC721 tokens the Contract might own, to the Beneficiary\\n     * @param _erc721address Address of the ERC721 Contract\\n     * @param _tokenId ID of the Token you wish to send to the Beneficiary.\\n     * @return _success Whether the transaction was successful or not\\n     */\\n    function sendERC721ToBeneficiary(address _erc721address, uint256 _tokenId)\\n        external\\n        onlyOwner\\n        returns (bool _success)\\n    {\\n        IERC721 erc721Token;\\n        erc721Token = IERC721(_erc721address);\\n\\n        erc721Token.safeTransferFrom(address(this), owner(), _tokenId);\\n\\n        emit ERC721SentToBeneficiary(\\n            msg.sender,\\n            owner(),\\n            _erc721address,\\n            _tokenId,\\n            block.timestamp\\n        );\\n\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2dbf0bf42405ef1705af5b02eeedac6bb651ea8d3712abcc6df717fac96b2cdb\",\"license\":\"ISC\"}},\"version\":1}",
  "bytecode": "0x60a06040819052600060808190526200001b91600b9162000a87565b506040805160208101918290526000908190526200003c91600c9162000a87565b506011805460ff60a01b191660ff60a01b1790556040516200478638819003908190833981016040819052620000729162000bc8565b816001815181106200009457634e487b7160e01b600052603260045260246000fd5b602002602001015184848382828160009080519060200190620000b992919062000a87565b508051620000cf90600190602084019062000a87565b505050620000ec620000e66200021960201b60201c565b6200021d565b80516200010190600c90602084019062000a87565b5050600e80546001600160a01b0319166001600160a01b039490941693909317909255505060016010558151620001669083906000906200015257634e487b7160e01b600052603260045260246000fd5b60200260200101516200021d60201b60201c565b816001815181106200018857634e487b7160e01b600052603260045260246000fd5b6020026020010151600e60006101000a8154816001600160a01b0302191690836001600160a01b0316021790555081600281518110620001d857634e487b7160e01b600052603260045260246000fd5b6020908102919091010151601180546001600160a01b0319166001600160a01b039092169190911790556200020f3360006200026f565b5050505062000e59565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b620002918282604051806020016040528060008152506200029560201b60201c565b5050565b620002a1838362000311565b620002b06000848484620004b2565b6200030c5760405162461bcd60e51b815260206004820152603260248201526000805160206200476683398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084015b60405180910390fd5b505050565b6001600160a01b038216620003695760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640162000303565b6000818152600260205260409020546001600160a01b031615620003d05760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000303565b620003e06000838360016200061b565b6000818152600260205260409020546001600160a01b031615620004475760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640162000303565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000620004d3846001600160a01b03166200078560201b62001d6b1760201c565b156200060f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906200050d90339089908890889060040162000d03565b602060405180830381600087803b1580156200052857600080fd5b505af19250505080156200055b575060408051601f3d908101601f19168201909252620005589181019062000b97565b60015b620005f4573d8080156200058c576040519150601f19603f3d011682016040523d82523d6000602084013e62000591565b606091505b508051620005ec5760405162461bcd60e51b815260206004820152603260248201526000805160206200476683398151915260448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606482015260840162000303565b805181602001fd5b6001600160e01b031916630a85bd0160e11b14905062000613565b5060015b949350505050565b62000634848484846200079460201b62001d7a1760201c565b6001811115620006ad5760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f727465640000000000000000000000606482015260840162000303565b816001600160a01b0385166200070c576200070681600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b62000732565b836001600160a01b0316856001600160a01b031614620007325762000732858262000823565b6001600160a01b03841662000752576200074c81620008d0565b62000778565b846001600160a01b0316846001600160a01b0316146200077857620007788482620009ae565b5050505050565b50505050565b6001600160a01b03163b151590565b60018111156200077f576001600160a01b03841615620007de576001600160a01b03841660009081526003602052604081208054839290620007d890849062000da7565b90915550505b6001600160a01b038316156200077f576001600160a01b038316600090815260036020526040812080548392906200081890849062000d8c565b909155505050505050565b600060016200083d84620009ff60201b620015c81760201c565b62000849919062000da7565b6000838152600760205260409020549091508082146200089d576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090620008e49060019062000da7565b600083815260096020526040812054600880549394509092849081106200091b57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905080600883815481106200094b57634e487b7160e01b600052603260045260246000fd5b60009182526020808320909101929092558281526009909152604080822084905585825281205560088054806200099257634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000620009c683620009ff60201b620015c81760201c565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b60006001600160a01b03821662000a6b5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b606482015260840162000303565b506001600160a01b031660009081526003602052604090205490565b82805462000a959062000df0565b90600052602060002090601f01602090048101928262000ab9576000855562000b04565b82601f1062000ad457805160ff191683800117855562000b04565b8280016001018555821562000b04579182015b8281111562000b0457825182559160200191906001019062000ae7565b5062000b1292915062000b16565b5090565b5b8082111562000b12576000815560010162000b17565b600082601f83011262000b3e578081fd5b81516001600160401b0381111562000b5a5762000b5a62000e43565b62000b6f601f8201601f191660200162000d59565b81815284602083860101111562000b84578283fd5b6200061382602083016020870162000dc1565b60006020828403121562000ba9578081fd5b81516001600160e01b03198116811462000bc1578182fd5b9392505050565b6000806000806080858703121562000bde578283fd5b84516001600160401b038082111562000bf5578485fd5b62000c038883890162000b2d565b955060209150818701518181111562000c1a578586fd5b62000c2889828a0162000b2d565b95505060408701518181111562000c3d578485fd5b8701601f8101891362000c4e578485fd5b80518281111562000c635762000c6362000e43565b8060051b62000c7485820162000d59565b8281528581019084870183860188018e101562000c8f57898afd5b8995505b8486101562000ccb57805193506001600160a01b038416841462000cb557898afd5b8383526001959095019491870191870162000c93565b508098505050505050606087015191508082111562000ce8578283fd5b5062000cf78782880162000b2d565b91505092959194509250565b600060018060a01b03808716835280861660208401525083604083015260806060830152825180608084015262000d428160a085016020870162000dc1565b601f01601f19169190910160a00195945050505050565b604051601f8201601f191681016001600160401b038111828210171562000d845762000d8462000e43565b604052919050565b6000821982111562000da25762000da262000e2d565b500190565b60008282101562000dbc5762000dbc62000e2d565b500390565b60005b8381101562000dde57818101518382015260200162000dc4565b838111156200077f5750506000910152565b600181811c9082168062000e0557607f821691505b6020821081141562000e2757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6138fd8062000e696000396000f3fe6080604052600436106103225760003560e01c806370a08231116101a5578063b88d4fde116100ec578063d226ae0811610095578063e985e9c51161006f578063e985e9c51461099a578063ea71b0ce146109e3578063f2fde38b14610a03578063f5ac49a814610a2357610364565b8063d226ae081461092a578063e88786f21461094a578063e8a3d4851461098557610364565b8063c468ef8a116100c6578063c468ef8a146108ca578063c5f956af146108ea578063c87b56dd1461090a57610364565b8063b88d4fde14610854578063ba913e9a14610874578063c1140dcc1461089457610364565b80639d2f4e061161014e578063a6f353f011610128578063a6f353f0146107f6578063b60d428814610816578063b783a6c61461081e57610364565b80639d2f4e0614610796578063a22cb465146107b6578063a667cfbe146107d657610364565b80637d549e991161017f5780637d549e991461074c5780638da5cb5b1461076357806395d89b411461078157610364565b806370a0823114610704578063715018a61461072457806379e93bf81461073957610364565b806342842e0e116102695780635f2f1bea1161021257806367c3b1b9116101ec57806367c3b1b9146106af57806368f8fdd3146106cf5780636c0360eb146106ef57610364565b80635f2f1bea1461064d578063625c94b61461066f5780636352211e1461068f57610364565b80634f558e79116102435780634f558e79146105ed5780634f6ccce71461060d5780635699b9041461062d57610364565b806342842e0e1461056d57806348b686701461058d5780634e05847e146105c057610364565b80631d3afee6116102cb5780632a55205a116102a55780632a55205a146104ee5780632f745c591461052d57806339a0c6f91461054d57610364565b80631d3afee61461047e5780631e05e4501461049e57806323b872dd146104ce57610364565b8063095ea7b3116102fc578063095ea7b31461042a57806312065fe01461044c57806318160ddd1461046957610364565b806301ffc9a71461039b57806306fdde03146103d0578063081812fc146103f257610364565b36610364576040805134815242602082015233917fde036a4c4e38caa9ca3becc89e7c5899151feaea6129cf8964ce3c58b5a15f4091015b60405180910390a2005b6040805134815242602082015233917fde036a4c4e38caa9ca3becc89e7c5899151feaea6129cf8964ce3c58b5a15f40910161035a565b3480156103a757600080fd5b506103bb6103b63660046133b0565b610a63565b60405190151581526020015b60405180910390f35b3480156103dc57600080fd5b506103e5610a8e565b6040516103c7919061370a565b3480156103fe57600080fd5b5061041261040d3660046134f0565b610b20565b6040516001600160a01b0390911681526020016103c7565b34801561043657600080fd5b5061044a6104453660046132c8565b610b47565b005b34801561045857600080fd5b50475b6040519081526020016103c7565b34801561047557600080fd5b5060085461045b565b34801561048a57600080fd5b506104126104993660046134f0565b610c62565b6104b16104ac36600461341b565b610c8c565b604080519283526001600160a01b039091166020830152016103c7565b3480156104da57600080fd5b5061044a6104e93660046131de565b610e50565b3480156104fa57600080fd5b5061050e610509366004613520565b610ec7565b604080516001600160a01b0390931683526020830191909152016103c7565b34801561053957600080fd5b5061045b6105483660046132c8565b610f3d565b34801561055957600080fd5b506103e56105683660046133e8565b610fd3565b34801561057957600080fd5b5061044a6105883660046131de565b611084565b34801561059957600080fd5b506011546105ae90600160a01b900460ff1681565b60405160ff90911681526020016103c7565b3480156105cc57600080fd5b506105e06105db36600461318a565b61109f565b6040516103c791906136c6565b3480156105f957600080fd5b506103bb6106083660046134f0565b61110a565b34801561061957600080fd5b5061045b6106283660046134f0565b611129565b34801561063957600080fd5b506103e56106483660046133e8565b6111ca565b34801561065957600080fd5b506106626111ee565b6040516103c79190613658565b34801561067b57600080fd5b5061066261068a36600461318a565b61124f565b34801561069b57600080fd5b506104126106aa3660046134f0565b6112c4565b3480156106bb57600080fd5b506103bb6106ca3660046134f0565b611329565b3480156106db57600080fd5b506103bb6106ea3660046132c8565b611438565b3480156106fb57600080fd5b506103e561153a565b34801561071057600080fd5b5061045b61071f36600461318a565b6115c8565b34801561073057600080fd5b5061044a61164e565b61045b61074736600461318a565b611662565b34801561075857600080fd5b5060125461045b9081565b34801561076f57600080fd5b50600a546001600160a01b0316610412565b34801561078d57600080fd5b506103e561189e565b3480156107a257600080fd5b506103bb6107b1366004613541565b6118ad565b3480156107c257600080fd5b5061044a6107d136600461329b565b6118d9565b3480156107e257600080fd5b506103bb6107f13660046132c8565b6118e8565b34801561080257600080fd5b506103bb61081136600461318a565b6119f5565b61044a611a37565b34801561082a57600080fd5b506104126108393660046134f0565b6014602052600090815260409020546001600160a01b031681565b34801561086057600080fd5b5061044a61086f36600461321e565b611a73565b34801561088057600080fd5b5061045b61088f3660046132c8565b611af1565b3480156108a057600080fd5b506104126108af3660046134f0565b6015602052600090815260409020546001600160a01b031681565b3480156108d657600080fd5b506104126108e53660046132c8565b611b22565b3480156108f657600080fd5b50601154610412906001600160a01b031681565b34801561091657600080fd5b506103e56109253660046134f0565b611b5a565b34801561093657600080fd5b50600e54610412906001600160a01b031681565b34801561095657600080fd5b506103bb6109653660046131a6565b601760209081526000928352604080842090915290825290205460ff1681565b34801561099157600080fd5b506103e5611cba565b3480156109a657600080fd5b506103bb6109b53660046131a6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156109ef57600080fd5b506104126109fe36600461318a565b611cc9565b348015610a0f57600080fd5b5061044a610a1e36600461318a565b611cf2565b348015610a2f57600080fd5b5061050e610a3e3660046134f0565b601860205260009081526040902080546001909101546001600160a01b039091169082565b60006001600160e01b0319821663780e9d6360e01b1480610a885750610a8882611e02565b92915050565b606060008054610a9d9061380c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac99061380c565b8015610b165780601f10610aeb57610100808354040283529160200191610b16565b820191906000526020600020905b815481529060010190602001808311610af957829003601f168201915b5050505050905090565b6000610b2b82611e52565b506000908152600460205260409020546001600160a01b031690565b6000610b52826112c4565b9050806001600160a01b0316836001600160a01b03161415610bc55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610be15750610be181336109b5565b610c535760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610bbc565b610c5d8383611eb6565b505050565b600f8181548110610c7257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806000855111610ce05760405162461bcd60e51b815260206004820152601260248201527f656d70747920636f6e74726163742075726900000000000000000000000000006044820152606401610bbc565b6000610cee85856001611f24565b9050610cf981612026565b6000805b8651811015610ded57868181518110610d2657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316336001600160a01b03161415610ddb57610d79878281518110610d6a57634e487b7160e01b600052603260045260246000fd5b6020026020010151848a61215b565b915087604051610d8991906135d1565b60405190819003812063ffffffff421682529033906001600160a01b038716907f456581a694237682875f14ca77ffae2ac56103160254db4f47ad1201055307739060200160405180910390a4610ded565b80610de581613847565b915050610cfd565b50846001600160a01b0316336001600160a01b0316836001600160a01b03167f47dd6d6bf5e6e82e606137f06a824304e136d48c3d5ee484d0bedaf19e41bd898942604051610e3d92919061369e565b60405180910390a4969095509350505050565b610e5a3382612234565b610ebc5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610bbc565b610c5d8383836122b2565b6000828152601860209081526040808320815180830190925280546001600160a01b0316808352600190910154928201929092528291610f0e576000809250925050610f36565b6000612710826020015186610f2391906137aa565b610f2d919061378a565b91519350909150505b9250929050565b6000610f48836115c8565b8210610faa5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610bbc565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6060610fdd61249f565b8151610ff090600b906020850190613078565b50600b8054610ffe9061380c565b80601f016020809104026020016040519081016040528092919081815260200182805461102a9061380c565b80156110775780601f1061104c57610100808354040283529160200191611077565b820191906000526020600020905b81548152906001019060200180831161105a57829003601f168201915b505050505090505b919050565b610c5d83838360405180602001604052806000815250611a73565b6001600160a01b03811660009081526013602090815260409182902080548351818402810184019094528084526060939283018282801561107757602002820191906000526020600020905b8154815260200190600101908083116110eb5750505050509050919050565b6000818152600260205260408120546001600160a01b03161515610a88565b600061113460085490565b82106111975760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610bbc565b600882815481106111b857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b60606111d461249f565b81516111e790600c906020850190613078565b5090919050565b6060600f805480602002602001604051908101604052809291908181526020018280548015610b1657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611228575050505050905090565b6001600160a01b03811660009081526016602090815260409182902080548351818402810184019094528084526060939283018282801561107757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161129b5750505050509050919050565b6000818152600260205260408120546001600160a01b031680610a885760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bbc565b600061133361249f565b6000611347600a546001600160a01b031690565b6001600160a01b03168360405160006040518083038185875af1925050503d8060008114611391576040519150601f19603f3d011682016040523d82523d6000602084013e611396565b606091505b50509050806113e75760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657220746f2042656e6566696369617279206661696c65642e006044820152606401610bbc565b600a546040805185815242602082015281516001600160a01b039093169233927f2e41e1f1a437a2fee5c2d40deaf40d793dd6060da5d50979855342c87fb313d2928290030190a350600192915050565b600061144261249f565b826001600160a01b0381166342842e0e30611465600a546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b1580156114b457600080fd5b505af11580156114c8573d6000803e3d6000fd5b50505050836001600160a01b03166114e8600a546001600160a01b031690565b604080518681524260208201526001600160a01b03929092169133917f58530c195204db43ce7ea4fe134c0ccc70cb6cf6c5a0d6b1bf25324e70762cc591015b60405180910390a45060019392505050565b600b80546115479061380c565b80601f01602080910402602001604051908101604052809291908181526020018280546115739061380c565b80156115c05780601f10611595576101008083540402835291602001916115c0565b820191906000526020600020905b8154815290600101906020018083116115a357829003601f168201915b505050505081565b60006001600160a01b0382166116325760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610bbc565b506001600160a01b031660009081526003602052604090205490565b61165661249f565b61166060006124f9565b565b600080826001600160a01b0316635aa68ac06040518163ffffffff1660e01b815260040160006040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116da91908101906132f3565b90506116e583612026565b6001600160a01b03831660009081526013602052604081208054829061171b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050600061173382611b5a565b6001600160a01b038616600090815260176020908152604080832033845290915290205490915060ff161515600114156117a05760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481cda59db995960921b6044820152606401610bbc565b6000805b8451811015611839578481815181106117cd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316336001600160a01b031614156118275761182085828151811061181157634e487b7160e01b600052603260045260246000fd5b6020026020010151888561215b565b9150611839565b8061183181613847565b9150506117a4565b508160405161184891906135d1565b60405190819003812063ffffffff421682529033906001600160a01b038916907f456581a694237682875f14ca77ffae2ac56103160254db4f47ad1201055307739060200160405180910390a495945050505050565b606060018054610a9d9061380c565b60006118b761249f565b506011805460ff8316600160a01b0260ff60a01b199091161790556001919050565b6118e433838361254b565b5050565b60006118f261249f565b826001600160a01b03811663a9059cbb611914600a546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381600087803b15801561195c57600080fd5b505af1158015611970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119949190613394565b50836001600160a01b03166119b1600a546001600160a01b031690565b604080518681524260208201526001600160a01b03929092169133917ff8c70fd0f0ab529742dab9d00601a5c4355cd038b48ea3ef339379655bbdab469101611528565b60006119ff61249f565b6001600160a01b038216611a1257600080fd5b50601180546001600160a01b0383166001600160a01b03199091161790556001919050565b6040805134815242602082015233917fde036a4c4e38caa9ca3becc89e7c5899151feaea6129cf8964ce3c58b5a15f40910160405180910390a2565b611a7d3383612234565b611adf5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610bbc565b611aeb8484848461261a565b50505050565b60136020528160005260406000208181548110611b0d57600080fd5b90600052602060002001600091509150505481565b60166020528160005260406000208181548110611b3e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000818152600260205260409020546060906001600160a01b0316611bc15760405162461bcd60e51b815260206004820152601f60248201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e006044820152606401610bbc565b6000828152600d602052604081208054611bda9061380c565b80601f0160208091040260200160405190810160405280929190818152602001828054611c069061380c565b8015611c535780601f10611c2857610100808354040283529160200191611c53565b820191906000526020600020905b815481529060010190602001808311611c3657829003601f168201915b505050505090506000611c64612698565b9050805160001415611c77575092915050565b815115611ca9578082604051602001611c919291906135ed565b60405160208183030381529060405292505050919050565b611cb2846126a7565b949350505050565b6060600c8054610a9d9061380c565b6000611cd361249f565b50600e80546001600160a01b0319166001600160a01b03831617905590565b611cfa61249f565b6001600160a01b038116611d5f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bbc565b611d68816124f9565b50565b6001600160a01b03163b151590565b6001811115611aeb576001600160a01b03841615611dc0576001600160a01b03841660009081526003602052604081208054839290611dba9084906137c9565b90915550505b6001600160a01b03831615611aeb576001600160a01b03831660009081526003602052604081208054839290611df7908490613772565b909155505050505050565b60006001600160e01b031982166380ac58cd60e01b1480611e3357506001600160e01b03198216635b5e139f60e01b145b80610a8857506301ffc9a760e01b6001600160e01b0319831614610a88565b6000818152600260205260409020546001600160a01b0316611d685760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bbc565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611eeb826112c4565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611f2f61270e565b600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b038316908117909155604051637aee1c6b60e01b815291925090637aee1c6b90611fa69088908890889060040161366b565b600060405180830381600087803b158015611fc057600080fd5b505af1158015611fd4573d6000803e3d6000fd5b505060405163ffffffff421681523392506001600160a01b03841691507f36d4e3468046083929f1c59ce1952ac5f70d445230a40ba2b81a7263bf23c53c9060200160405180910390a3949350505050565b3415611d68576002816001600160a01b031663a26dbf266040518163ffffffff1660e01b815260040160206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190613508565b11156120ed5760405162461bcd60e51b815260206004820152601760248201527f63616e6e6f74206469726563746c79206465706f7369740000000000000000006044820152606401610bbc565b604051638340f54960e01b8152600060048201526001600160a01b0382166024820181905234604483018190529091638340f54991906064016000604051808303818588803b15801561213f57600080fd5b505af1158015612153573d6000803e3d6000fd5b505050505050565b600061216b601280546001019055565b600061217660125490565b905061218285826127d0565b61218c81846127ea565b6001600160a01b038085166000818152601360209081526040808320805460018181018355918552838520018790558684526014835281842080546001600160a01b03199081168717909155601584528285208054978d16978216881790558685526016845282852080548084018255908652848620018054909116861790559383526017825280832094835293905291909120805460ff1916909117905590509392505050565b600080612240836112c4565b9050806001600160a01b0316846001600160a01b0316148061228757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611cb25750836001600160a01b03166122a084610b20565b6001600160a01b031614949350505050565b826001600160a01b03166122c5826112c4565b6001600160a01b0316146123295760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610bbc565b6001600160a01b03821661238b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bbc565b612398838383600161286d565b826001600160a01b03166123ab826112c4565b6001600160a01b03161461240f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610bbc565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b031633146116605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bbc565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156125ad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bbc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6126258484846122b2565b612631848484846129b5565b611aeb5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610bbc565b6060600b8054610a9d9061380c565b60606126b282611e52565b60006126bc612698565b905060008151116126dc5760405180602001604052806000815250612707565b806126e684612b0d565b6040516020016126f79291906135ed565b6040516020818303038152906040525b9392505050565b600e546040517f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815260609190911b6bffffffffffffffffffffffff1916601482018190526e5af43d82803e903d91602b57fd5bf360881b602883015260009160378184f09250506001600160a01b0382166127cc5760405162461bcd60e51b815260206004820152601560248201527f455243313136373a20636c6f6e65206661696c656400000000000000000000006044820152606401610bbc565b5090565b6118e4828260405180602001604052806000815250612bc5565b6000828152600260205260409020546001600160a01b031661284e5760405162461bcd60e51b815260206004820152601c60248201527f55524920736574206f66206e6f6e6578697374656e7420746f6b656e000000006044820152606401610bbc565b6000828152600d602090815260409091208251610c5d92840190613078565b61287984848484611d7a565b60018111156128f05760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610bbc565b816001600160a01b03851661294c5761294781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61296f565b836001600160a01b0316856001600160a01b03161461296f5761296f8582612c43565b6001600160a01b03841661298b5761298681612ce0565b6129ae565b846001600160a01b0316846001600160a01b0316146129ae576129ae8482612db9565b5050505050565b60006001600160a01b0384163b15612b0257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129f990339089908890889060040161361c565b602060405180830381600087803b158015612a1357600080fd5b505af1925050508015612a43575060408051601f3d908101601f19168201909252612a40918101906133cc565b60015b612ae8573d808015612a71576040519150601f19603f3d011682016040523d82523d6000602084013e612a76565b606091505b508051612ae05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610bbc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cb2565b506001949350505050565b60606000612b1a83612dfd565b600101905060008167ffffffffffffffff811115612b4857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612b72576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084612bb857612bbd565b612b7c565b509392505050565b612bcf8383612edf565b612bdc60008484846129b5565b610c5d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610bbc565b60006001612c50846115c8565b612c5a91906137c9565b600083815260076020526040902054909150808214612cad576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612cf2906001906137c9565b60008381526009602052604081205460088054939450909284908110612d2857634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110612d5757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612d9d57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612dc4836115c8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612e46577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612e72576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612e9057662386f26fc10000830492506010015b6305f5e1008310612ea8576305f5e100830492506008015b6127108310612ebc57612710830492506004015b60648310612ece576064830492506002015b600a8310610a885760010192915050565b6001600160a01b038216612f355760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bbc565b6000818152600260205260409020546001600160a01b031615612f9a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bbc565b612fa860008383600161286d565b6000818152600260205260409020546001600160a01b03161561300d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bbc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546130849061380c565b90600052602060002090601f0160209004810192826130a657600085556130ec565b82601f106130bf57805160ff19168380011785556130ec565b828001600101855582156130ec579182015b828111156130ec5782518255916020019190600101906130d1565b506127cc9291505b808211156127cc57600081556001016130f4565b600067ffffffffffffffff83111561312257613122613878565b613135601f8401601f191660200161371d565b905082815283838301111561314957600080fd5b828260208301376000602084830101529392505050565b803561107f8161388e565b600082601f83011261317b578081fd5b61270783833560208501613108565b60006020828403121561319b578081fd5b81356127078161388e565b600080604083850312156131b8578081fd5b82356131c38161388e565b915060208301356131d38161388e565b809150509250929050565b6000806000606084860312156131f2578081fd5b83356131fd8161388e565b9250602084013561320d8161388e565b929592945050506040919091013590565b60008060008060808587031215613233578081fd5b843561323e8161388e565b9350602085013561324e8161388e565b925060408501359150606085013567ffffffffffffffff811115613270578182fd5b8501601f81018713613280578182fd5b61328f87823560208401613108565b91505092959194509250565b600080604083850312156132ad578182fd5b82356132b88161388e565b915060208301356131d3816138a3565b600080604083850312156132da578182fd5b82356132e58161388e565b946020939093013593505050565b60006020808385031215613305578182fd5b825167ffffffffffffffff81111561331b578283fd5b8301601f8101851361332b578283fd5b805161333e6133398261374e565b61371d565b80828252848201915084840188868560051b870101111561335d578687fd5b8694505b838510156133885780516133748161388e565b835260019490940193918501918501613361565b50979650505050505050565b6000602082840312156133a5578081fd5b8151612707816138a3565b6000602082840312156133c1578081fd5b8135612707816138b1565b6000602082840312156133dd578081fd5b8151612707816138b1565b6000602082840312156133f9578081fd5b813567ffffffffffffffff81111561340f578182fd5b611cb28482850161316b565b60008060006060848603121561342f578081fd5b833567ffffffffffffffff80821115613446578283fd5b6134528783880161316b565b9450602091508186013581811115613468578384fd5b86019050601f8101871361347a578283fd5b80356134886133398261374e565b8082825284820191508484018a868560051b87010111156134a7578687fd5b8694505b838510156134d25780356134be8161388e565b8352600194909401939185019185016134ab565b5080965050505050506134e760408501613160565b90509250925092565b600060208284031215613501578081fd5b5035919050565b600060208284031215613519578081fd5b5051919050565b60008060408385031215613532578182fd5b50508035926020909101359150565b600060208284031215613552578081fd5b813560ff81168114612707578182fd5b6000815180845260208085019450808401835b8381101561359a5781516001600160a01b031687529582019590820190600101613575565b509495945050505050565b600081518084526135bd8160208601602086016137e0565b601f01601f19169290920160200192915050565b600082516135e38184602087016137e0565b9190910192915050565b600083516135ff8184602088016137e0565b8351908301906136138183602088016137e0565b01949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261364e60808301846135a5565b9695505050505050565b6020815260006127076020830184613562565b60608152600061367e6060830186613562565b6001600160a01b0394909416602083015250901515604090910152919050565b6040815260006136b16040830185613562565b905063ffffffff831660208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156136fe578351835292840192918401916001016136e2565b50909695505050505050565b60208152600061270760208301846135a5565b604051601f8201601f1916810167ffffffffffffffff8111828210171561374657613746613878565b604052919050565b600067ffffffffffffffff82111561376857613768613878565b5060051b60200190565b6000821982111561378557613785613862565b500190565b6000826137a557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156137c4576137c4613862565b500290565b6000828210156137db576137db613862565b500390565b60005b838110156137fb5781810151838201526020016137e3565b83811115611aeb5750506000910152565b600181811c9082168061382057607f821691505b6020821081141561384157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561385b5761385b613862565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d6857600080fd5b8015158114611d6857600080fd5b6001600160e01b031981168114611d6857600080fdfea26469706673582212205c2e661fd3518d4addb548d080a998ac64b4ded059b5a5885d1c168a4de819f664736f6c634300080400334552433732313a207472616e7366657220746f206e6f6e204552433732315265",
  "deployedBytecode": "0x6080604052600436106103225760003560e01c806370a08231116101a5578063b88d4fde116100ec578063d226ae0811610095578063e985e9c51161006f578063e985e9c51461099a578063ea71b0ce146109e3578063f2fde38b14610a03578063f5ac49a814610a2357610364565b8063d226ae081461092a578063e88786f21461094a578063e8a3d4851461098557610364565b8063c468ef8a116100c6578063c468ef8a146108ca578063c5f956af146108ea578063c87b56dd1461090a57610364565b8063b88d4fde14610854578063ba913e9a14610874578063c1140dcc1461089457610364565b80639d2f4e061161014e578063a6f353f011610128578063a6f353f0146107f6578063b60d428814610816578063b783a6c61461081e57610364565b80639d2f4e0614610796578063a22cb465146107b6578063a667cfbe146107d657610364565b80637d549e991161017f5780637d549e991461074c5780638da5cb5b1461076357806395d89b411461078157610364565b806370a0823114610704578063715018a61461072457806379e93bf81461073957610364565b806342842e0e116102695780635f2f1bea1161021257806367c3b1b9116101ec57806367c3b1b9146106af57806368f8fdd3146106cf5780636c0360eb146106ef57610364565b80635f2f1bea1461064d578063625c94b61461066f5780636352211e1461068f57610364565b80634f558e79116102435780634f558e79146105ed5780634f6ccce71461060d5780635699b9041461062d57610364565b806342842e0e1461056d57806348b686701461058d5780634e05847e146105c057610364565b80631d3afee6116102cb5780632a55205a116102a55780632a55205a146104ee5780632f745c591461052d57806339a0c6f91461054d57610364565b80631d3afee61461047e5780631e05e4501461049e57806323b872dd146104ce57610364565b8063095ea7b3116102fc578063095ea7b31461042a57806312065fe01461044c57806318160ddd1461046957610364565b806301ffc9a71461039b57806306fdde03146103d0578063081812fc146103f257610364565b36610364576040805134815242602082015233917fde036a4c4e38caa9ca3becc89e7c5899151feaea6129cf8964ce3c58b5a15f4091015b60405180910390a2005b6040805134815242602082015233917fde036a4c4e38caa9ca3becc89e7c5899151feaea6129cf8964ce3c58b5a15f40910161035a565b3480156103a757600080fd5b506103bb6103b63660046133b0565b610a63565b60405190151581526020015b60405180910390f35b3480156103dc57600080fd5b506103e5610a8e565b6040516103c7919061370a565b3480156103fe57600080fd5b5061041261040d3660046134f0565b610b20565b6040516001600160a01b0390911681526020016103c7565b34801561043657600080fd5b5061044a6104453660046132c8565b610b47565b005b34801561045857600080fd5b50475b6040519081526020016103c7565b34801561047557600080fd5b5060085461045b565b34801561048a57600080fd5b506104126104993660046134f0565b610c62565b6104b16104ac36600461341b565b610c8c565b604080519283526001600160a01b039091166020830152016103c7565b3480156104da57600080fd5b5061044a6104e93660046131de565b610e50565b3480156104fa57600080fd5b5061050e610509366004613520565b610ec7565b604080516001600160a01b0390931683526020830191909152016103c7565b34801561053957600080fd5b5061045b6105483660046132c8565b610f3d565b34801561055957600080fd5b506103e56105683660046133e8565b610fd3565b34801561057957600080fd5b5061044a6105883660046131de565b611084565b34801561059957600080fd5b506011546105ae90600160a01b900460ff1681565b60405160ff90911681526020016103c7565b3480156105cc57600080fd5b506105e06105db36600461318a565b61109f565b6040516103c791906136c6565b3480156105f957600080fd5b506103bb6106083660046134f0565b61110a565b34801561061957600080fd5b5061045b6106283660046134f0565b611129565b34801561063957600080fd5b506103e56106483660046133e8565b6111ca565b34801561065957600080fd5b506106626111ee565b6040516103c79190613658565b34801561067b57600080fd5b5061066261068a36600461318a565b61124f565b34801561069b57600080fd5b506104126106aa3660046134f0565b6112c4565b3480156106bb57600080fd5b506103bb6106ca3660046134f0565b611329565b3480156106db57600080fd5b506103bb6106ea3660046132c8565b611438565b3480156106fb57600080fd5b506103e561153a565b34801561071057600080fd5b5061045b61071f36600461318a565b6115c8565b34801561073057600080fd5b5061044a61164e565b61045b61074736600461318a565b611662565b34801561075857600080fd5b5060125461045b9081565b34801561076f57600080fd5b50600a546001600160a01b0316610412565b34801561078d57600080fd5b506103e561189e565b3480156107a257600080fd5b506103bb6107b1366004613541565b6118ad565b3480156107c257600080fd5b5061044a6107d136600461329b565b6118d9565b3480156107e257600080fd5b506103bb6107f13660046132c8565b6118e8565b34801561080257600080fd5b506103bb61081136600461318a565b6119f5565b61044a611a37565b34801561082a57600080fd5b506104126108393660046134f0565b6014602052600090815260409020546001600160a01b031681565b34801561086057600080fd5b5061044a61086f36600461321e565b611a73565b34801561088057600080fd5b5061045b61088f3660046132c8565b611af1565b3480156108a057600080fd5b506104126108af3660046134f0565b6015602052600090815260409020546001600160a01b031681565b3480156108d657600080fd5b506104126108e53660046132c8565b611b22565b3480156108f657600080fd5b50601154610412906001600160a01b031681565b34801561091657600080fd5b506103e56109253660046134f0565b611b5a565b34801561093657600080fd5b50600e54610412906001600160a01b031681565b34801561095657600080fd5b506103bb6109653660046131a6565b601760209081526000928352604080842090915290825290205460ff1681565b34801561099157600080fd5b506103e5611cba565b3480156109a657600080fd5b506103bb6109b53660046131a6565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b3480156109ef57600080fd5b506104126109fe36600461318a565b611cc9565b348015610a0f57600080fd5b5061044a610a1e36600461318a565b611cf2565b348015610a2f57600080fd5b5061050e610a3e3660046134f0565b601860205260009081526040902080546001909101546001600160a01b039091169082565b60006001600160e01b0319821663780e9d6360e01b1480610a885750610a8882611e02565b92915050565b606060008054610a9d9061380c565b80601f0160208091040260200160405190810160405280929190818152602001828054610ac99061380c565b8015610b165780601f10610aeb57610100808354040283529160200191610b16565b820191906000526020600020905b815481529060010190602001808311610af957829003601f168201915b5050505050905090565b6000610b2b82611e52565b506000908152600460205260409020546001600160a01b031690565b6000610b52826112c4565b9050806001600160a01b0316836001600160a01b03161415610bc55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084015b60405180910390fd5b336001600160a01b0382161480610be15750610be181336109b5565b610c535760405162461bcd60e51b815260206004820152603d60248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60448201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c0000006064820152608401610bbc565b610c5d8383611eb6565b505050565b600f8181548110610c7257600080fd5b6000918252602090912001546001600160a01b0316905081565b6000806000855111610ce05760405162461bcd60e51b815260206004820152601260248201527f656d70747920636f6e74726163742075726900000000000000000000000000006044820152606401610bbc565b6000610cee85856001611f24565b9050610cf981612026565b6000805b8651811015610ded57868181518110610d2657634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316336001600160a01b03161415610ddb57610d79878281518110610d6a57634e487b7160e01b600052603260045260246000fd5b6020026020010151848a61215b565b915087604051610d8991906135d1565b60405190819003812063ffffffff421682529033906001600160a01b038716907f456581a694237682875f14ca77ffae2ac56103160254db4f47ad1201055307739060200160405180910390a4610ded565b80610de581613847565b915050610cfd565b50846001600160a01b0316336001600160a01b0316836001600160a01b03167f47dd6d6bf5e6e82e606137f06a824304e136d48c3d5ee484d0bedaf19e41bd898942604051610e3d92919061369e565b60405180910390a4969095509350505050565b610e5a3382612234565b610ebc5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610bbc565b610c5d8383836122b2565b6000828152601860209081526040808320815180830190925280546001600160a01b0316808352600190910154928201929092528291610f0e576000809250925050610f36565b6000612710826020015186610f2391906137aa565b610f2d919061378a565b91519350909150505b9250929050565b6000610f48836115c8565b8210610faa5760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610bbc565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6060610fdd61249f565b8151610ff090600b906020850190613078565b50600b8054610ffe9061380c565b80601f016020809104026020016040519081016040528092919081815260200182805461102a9061380c565b80156110775780601f1061104c57610100808354040283529160200191611077565b820191906000526020600020905b81548152906001019060200180831161105a57829003601f168201915b505050505090505b919050565b610c5d83838360405180602001604052806000815250611a73565b6001600160a01b03811660009081526013602090815260409182902080548351818402810184019094528084526060939283018282801561107757602002820191906000526020600020905b8154815260200190600101908083116110eb5750505050509050919050565b6000818152600260205260408120546001600160a01b03161515610a88565b600061113460085490565b82106111975760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610bbc565b600882815481106111b857634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b60606111d461249f565b81516111e790600c906020850190613078565b5090919050565b6060600f805480602002602001604051908101604052809291908181526020018280548015610b1657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611228575050505050905090565b6001600160a01b03811660009081526016602090815260409182902080548351818402810184019094528084526060939283018282801561107757602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161129b5750505050509050919050565b6000818152600260205260408120546001600160a01b031680610a885760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bbc565b600061133361249f565b6000611347600a546001600160a01b031690565b6001600160a01b03168360405160006040518083038185875af1925050503d8060008114611391576040519150601f19603f3d011682016040523d82523d6000602084013e611396565b606091505b50509050806113e75760405162461bcd60e51b815260206004820152601f60248201527f5472616e7366657220746f2042656e6566696369617279206661696c65642e006044820152606401610bbc565b600a546040805185815242602082015281516001600160a01b039093169233927f2e41e1f1a437a2fee5c2d40deaf40d793dd6060da5d50979855342c87fb313d2928290030190a350600192915050565b600061144261249f565b826001600160a01b0381166342842e0e30611465600a546001600160a01b031690565b6040516001600160e01b031960e085901b1681526001600160a01b0392831660048201529116602482015260448101869052606401600060405180830381600087803b1580156114b457600080fd5b505af11580156114c8573d6000803e3d6000fd5b50505050836001600160a01b03166114e8600a546001600160a01b031690565b604080518681524260208201526001600160a01b03929092169133917f58530c195204db43ce7ea4fe134c0ccc70cb6cf6c5a0d6b1bf25324e70762cc591015b60405180910390a45060019392505050565b600b80546115479061380c565b80601f01602080910402602001604051908101604052809291908181526020018280546115739061380c565b80156115c05780601f10611595576101008083540402835291602001916115c0565b820191906000526020600020905b8154815290600101906020018083116115a357829003601f168201915b505050505081565b60006001600160a01b0382166116325760405162461bcd60e51b815260206004820152602960248201527f4552433732313a2061646472657373207a65726f206973206e6f7420612076616044820152683634b21037bbb732b960b91b6064820152608401610bbc565b506001600160a01b031660009081526003602052604090205490565b61165661249f565b61166060006124f9565b565b600080826001600160a01b0316635aa68ac06040518163ffffffff1660e01b815260040160006040518083038186803b15801561169e57600080fd5b505afa1580156116b2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116da91908101906132f3565b90506116e583612026565b6001600160a01b03831660009081526013602052604081208054829061171b57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050600061173382611b5a565b6001600160a01b038616600090815260176020908152604080832033845290915290205490915060ff161515600114156117a05760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481cda59db995960921b6044820152606401610bbc565b6000805b8451811015611839578481815181106117cd57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316336001600160a01b031614156118275761182085828151811061181157634e487b7160e01b600052603260045260246000fd5b6020026020010151888561215b565b9150611839565b8061183181613847565b9150506117a4565b508160405161184891906135d1565b60405190819003812063ffffffff421682529033906001600160a01b038916907f456581a694237682875f14ca77ffae2ac56103160254db4f47ad1201055307739060200160405180910390a495945050505050565b606060018054610a9d9061380c565b60006118b761249f565b506011805460ff8316600160a01b0260ff60a01b199091161790556001919050565b6118e433838361254b565b5050565b60006118f261249f565b826001600160a01b03811663a9059cbb611914600a546001600160a01b031690565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401602060405180830381600087803b15801561195c57600080fd5b505af1158015611970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119949190613394565b50836001600160a01b03166119b1600a546001600160a01b031690565b604080518681524260208201526001600160a01b03929092169133917ff8c70fd0f0ab529742dab9d00601a5c4355cd038b48ea3ef339379655bbdab469101611528565b60006119ff61249f565b6001600160a01b038216611a1257600080fd5b50601180546001600160a01b0383166001600160a01b03199091161790556001919050565b6040805134815242602082015233917fde036a4c4e38caa9ca3becc89e7c5899151feaea6129cf8964ce3c58b5a15f40910160405180910390a2565b611a7d3383612234565b611adf5760405162461bcd60e51b815260206004820152602d60248201527f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560448201526c1c881bdc88185c1c1c9bdd9959609a1b6064820152608401610bbc565b611aeb8484848461261a565b50505050565b60136020528160005260406000208181548110611b0d57600080fd5b90600052602060002001600091509150505481565b60166020528160005260406000208181548110611b3e57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000818152600260205260409020546060906001600160a01b0316611bc15760405162461bcd60e51b815260206004820152601f60248201527f55524920717565727920666f72206e6f6e6578697374656e7420746f6b656e006044820152606401610bbc565b6000828152600d602052604081208054611bda9061380c565b80601f0160208091040260200160405190810160405280929190818152602001828054611c069061380c565b8015611c535780601f10611c2857610100808354040283529160200191611c53565b820191906000526020600020905b815481529060010190602001808311611c3657829003601f168201915b505050505090506000611c64612698565b9050805160001415611c77575092915050565b815115611ca9578082604051602001611c919291906135ed565b60405160208183030381529060405292505050919050565b611cb2846126a7565b949350505050565b6060600c8054610a9d9061380c565b6000611cd361249f565b50600e80546001600160a01b0319166001600160a01b03831617905590565b611cfa61249f565b6001600160a01b038116611d5f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610bbc565b611d68816124f9565b50565b6001600160a01b03163b151590565b6001811115611aeb576001600160a01b03841615611dc0576001600160a01b03841660009081526003602052604081208054839290611dba9084906137c9565b90915550505b6001600160a01b03831615611aeb576001600160a01b03831660009081526003602052604081208054839290611df7908490613772565b909155505050505050565b60006001600160e01b031982166380ac58cd60e01b1480611e3357506001600160e01b03198216635b5e139f60e01b145b80610a8857506301ffc9a760e01b6001600160e01b0319831614610a88565b6000818152600260205260409020546001600160a01b0316611d685760405162461bcd60e51b815260206004820152601860248201527f4552433732313a20696e76616c696420746f6b656e20494400000000000000006044820152606401610bbc565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611eeb826112c4565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611f2f61270e565b600f80546001810182556000919091527f8d1108e10bcb7c27dddfc02ed9d693a074039d026cf4ea4240b40f7d581ac8020180546001600160a01b0319166001600160a01b038316908117909155604051637aee1c6b60e01b815291925090637aee1c6b90611fa69088908890889060040161366b565b600060405180830381600087803b158015611fc057600080fd5b505af1158015611fd4573d6000803e3d6000fd5b505060405163ffffffff421681523392506001600160a01b03841691507f36d4e3468046083929f1c59ce1952ac5f70d445230a40ba2b81a7263bf23c53c9060200160405180910390a3949350505050565b3415611d68576002816001600160a01b031663a26dbf266040518163ffffffff1660e01b815260040160206040518083038186803b15801561206757600080fd5b505afa15801561207b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061209f9190613508565b11156120ed5760405162461bcd60e51b815260206004820152601760248201527f63616e6e6f74206469726563746c79206465706f7369740000000000000000006044820152606401610bbc565b604051638340f54960e01b8152600060048201526001600160a01b0382166024820181905234604483018190529091638340f54991906064016000604051808303818588803b15801561213f57600080fd5b505af1158015612153573d6000803e3d6000fd5b505050505050565b600061216b601280546001019055565b600061217660125490565b905061218285826127d0565b61218c81846127ea565b6001600160a01b038085166000818152601360209081526040808320805460018181018355918552838520018790558684526014835281842080546001600160a01b03199081168717909155601584528285208054978d16978216881790558685526016845282852080548084018255908652848620018054909116861790559383526017825280832094835293905291909120805460ff1916909117905590509392505050565b600080612240836112c4565b9050806001600160a01b0316846001600160a01b0316148061228757506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b80611cb25750836001600160a01b03166122a084610b20565b6001600160a01b031614949350505050565b826001600160a01b03166122c5826112c4565b6001600160a01b0316146123295760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610bbc565b6001600160a01b03821661238b5760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610bbc565b612398838383600161286d565b826001600160a01b03166123ab826112c4565b6001600160a01b03161461240f5760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201526437bbb732b960d91b6064820152608401610bbc565b600081815260046020908152604080832080546001600160a01b03199081169091556001600160a01b0387811680865260038552838620805460001901905590871680865283862080546001019055868652600290945282852080549092168417909155905184937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b600a546001600160a01b031633146116605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610bbc565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b816001600160a01b0316836001600160a01b031614156125ad5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610bbc565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6126258484846122b2565b612631848484846129b5565b611aeb5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610bbc565b6060600b8054610a9d9061380c565b60606126b282611e52565b60006126bc612698565b905060008151116126dc5760405180602001604052806000815250612707565b806126e684612b0d565b6040516020016126f79291906135ed565b6040516020818303038152906040525b9392505050565b600e546040517f3d602d80600a3d3981f3363d3d373d3d3d363d73000000000000000000000000815260609190911b6bffffffffffffffffffffffff1916601482018190526e5af43d82803e903d91602b57fd5bf360881b602883015260009160378184f09250506001600160a01b0382166127cc5760405162461bcd60e51b815260206004820152601560248201527f455243313136373a20636c6f6e65206661696c656400000000000000000000006044820152606401610bbc565b5090565b6118e4828260405180602001604052806000815250612bc5565b6000828152600260205260409020546001600160a01b031661284e5760405162461bcd60e51b815260206004820152601c60248201527f55524920736574206f66206e6f6e6578697374656e7420746f6b656e000000006044820152606401610bbc565b6000828152600d602090815260409091208251610c5d92840190613078565b61287984848484611d7a565b60018111156128f05760405162461bcd60e51b815260206004820152603560248201527f455243373231456e756d657261626c653a20636f6e736563757469766520747260448201527f616e7366657273206e6f7420737570706f7274656400000000000000000000006064820152608401610bbc565b816001600160a01b03851661294c5761294781600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b61296f565b836001600160a01b0316856001600160a01b03161461296f5761296f8582612c43565b6001600160a01b03841661298b5761298681612ce0565b6129ae565b846001600160a01b0316846001600160a01b0316146129ae576129ae8482612db9565b5050505050565b60006001600160a01b0384163b15612b0257604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906129f990339089908890889060040161361c565b602060405180830381600087803b158015612a1357600080fd5b505af1925050508015612a43575060408051601f3d908101601f19168201909252612a40918101906133cc565b60015b612ae8573d808015612a71576040519150601f19603f3d011682016040523d82523d6000602084013e612a76565b606091505b508051612ae05760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610bbc565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611cb2565b506001949350505050565b60606000612b1a83612dfd565b600101905060008167ffffffffffffffff811115612b4857634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612b72576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084612bb857612bbd565b612b7c565b509392505050565b612bcf8383612edf565b612bdc60008484846129b5565b610c5d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610bbc565b60006001612c50846115c8565b612c5a91906137c9565b600083815260076020526040902054909150808214612cad576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612cf2906001906137c9565b60008381526009602052604081205460088054939450909284908110612d2857634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110612d5757634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612d9d57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612dc4836115c8565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310612e46577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310612e72576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310612e9057662386f26fc10000830492506010015b6305f5e1008310612ea8576305f5e100830492506008015b6127108310612ebc57612710830492506004015b60648310612ece576064830492506002015b600a8310610a885760010192915050565b6001600160a01b038216612f355760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610bbc565b6000818152600260205260409020546001600160a01b031615612f9a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bbc565b612fa860008383600161286d565b6000818152600260205260409020546001600160a01b03161561300d5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610bbc565b6001600160a01b038216600081815260036020908152604080832080546001019055848352600290915280822080546001600160a01b0319168417905551839291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b8280546130849061380c565b90600052602060002090601f0160209004810192826130a657600085556130ec565b82601f106130bf57805160ff19168380011785556130ec565b828001600101855582156130ec579182015b828111156130ec5782518255916020019190600101906130d1565b506127cc9291505b808211156127cc57600081556001016130f4565b600067ffffffffffffffff83111561312257613122613878565b613135601f8401601f191660200161371d565b905082815283838301111561314957600080fd5b828260208301376000602084830101529392505050565b803561107f8161388e565b600082601f83011261317b578081fd5b61270783833560208501613108565b60006020828403121561319b578081fd5b81356127078161388e565b600080604083850312156131b8578081fd5b82356131c38161388e565b915060208301356131d38161388e565b809150509250929050565b6000806000606084860312156131f2578081fd5b83356131fd8161388e565b9250602084013561320d8161388e565b929592945050506040919091013590565b60008060008060808587031215613233578081fd5b843561323e8161388e565b9350602085013561324e8161388e565b925060408501359150606085013567ffffffffffffffff811115613270578182fd5b8501601f81018713613280578182fd5b61328f87823560208401613108565b91505092959194509250565b600080604083850312156132ad578182fd5b82356132b88161388e565b915060208301356131d3816138a3565b600080604083850312156132da578182fd5b82356132e58161388e565b946020939093013593505050565b60006020808385031215613305578182fd5b825167ffffffffffffffff81111561331b578283fd5b8301601f8101851361332b578283fd5b805161333e6133398261374e565b61371d565b80828252848201915084840188868560051b870101111561335d578687fd5b8694505b838510156133885780516133748161388e565b835260019490940193918501918501613361565b50979650505050505050565b6000602082840312156133a5578081fd5b8151612707816138a3565b6000602082840312156133c1578081fd5b8135612707816138b1565b6000602082840312156133dd578081fd5b8151612707816138b1565b6000602082840312156133f9578081fd5b813567ffffffffffffffff81111561340f578182fd5b611cb28482850161316b565b60008060006060848603121561342f578081fd5b833567ffffffffffffffff80821115613446578283fd5b6134528783880161316b565b9450602091508186013581811115613468578384fd5b86019050601f8101871361347a578283fd5b80356134886133398261374e565b8082825284820191508484018a868560051b87010111156134a7578687fd5b8694505b838510156134d25780356134be8161388e565b8352600194909401939185019185016134ab565b5080965050505050506134e760408501613160565b90509250925092565b600060208284031215613501578081fd5b5035919050565b600060208284031215613519578081fd5b5051919050565b60008060408385031215613532578182fd5b50508035926020909101359150565b600060208284031215613552578081fd5b813560ff81168114612707578182fd5b6000815180845260208085019450808401835b8381101561359a5781516001600160a01b031687529582019590820190600101613575565b509495945050505050565b600081518084526135bd8160208601602086016137e0565b601f01601f19169290920160200192915050565b600082516135e38184602087016137e0565b9190910192915050565b600083516135ff8184602088016137e0565b8351908301906136138183602088016137e0565b01949350505050565b60006001600160a01b0380871683528086166020840152508360408301526080606083015261364e60808301846135a5565b9695505050505050565b6020815260006127076020830184613562565b60608152600061367e6060830186613562565b6001600160a01b0394909416602083015250901515604090910152919050565b6040815260006136b16040830185613562565b905063ffffffff831660208301529392505050565b6020808252825182820181905260009190848201906040850190845b818110156136fe578351835292840192918401916001016136e2565b50909695505050505050565b60208152600061270760208301846135a5565b604051601f8201601f1916810167ffffffffffffffff8111828210171561374657613746613878565b604052919050565b600067ffffffffffffffff82111561376857613768613878565b5060051b60200190565b6000821982111561378557613785613862565b500190565b6000826137a557634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156137c4576137c4613862565b500290565b6000828210156137db576137db613862565b500390565b60005b838110156137fb5781810151838201526020016137e3565b83811115611aeb5750506000910152565b600181811c9082168061382057607f821691505b6020821081141561384157634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561385b5761385b613862565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d6857600080fd5b8015158114611d6857600080fd5b6001600160e01b031981168114611d6857600080fdfea26469706673582212205c2e661fd3518d4addb548d080a998ac64b4ded059b5a5885d1c168a4de819f664736f6c63430008040033",
  "devdoc": {
    "author": "hey@kumareth.com",
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "changeFeesPermyriad(uint8)": {
        "params": {
          "_feesPermyriad": "Range: 0-255 (0.00% - 2.55%)"
        },
        "returns": {
          "_success": "Boolean to indicate if the fees were changed successfully"
        }
      },
      "changeTreasuryAddress(address)": {
        "params": {
          "_treasuryAddress": "Any address that is non-zero"
        },
        "returns": {
          "_success": "Boolean to indicate if the fees were changed successfully"
        }
      },
      "constructor": {
        "details": "Constructor function for the Judiciary ERC721 Contract",
        "params": {
          "contractURI_": "URL of Json metadata for this Contract",
          "initialAddresses_": "Address of the Owner Contract that manages Permissions.",
          "name_": "Name of the Judiciary artifact Collection",
          "symbol_": "Symbol for the Judiciary NFTs"
        }
      },
      "createContract(string,address[],address)": {
        "params": {
          "_contractURI": "URL of the JSON metadata for the Contract (can be IPFS hash)",
          "_intendedSignatories": "Array of addresses of the intended signatories",
          "_judge": "Address of the judge who can resolve the contract related dispute"
        },
        "returns": {
          "_escrowWalletAddress": "Address of the Escrow Wallet created for the contract",
          "_tokenId": "Token ID of the NFT created"
        }
      },
      "fetchEscrowAddressesBySignerAddress(address)": {
        "details": "returns an array of escrowAddresses for the given signerAddress",
        "params": {
          "_signerAddress": "Address of the Signer"
        },
        "returns": {
          "_escrowAddressesBySignerAddress": "Array of Escrow Addresses"
        }
      },
      "fetchTokenIdsByEscrowAddress(address)": {
        "details": "returns an array of tokenIds for the given escrowAddress",
        "params": {
          "_escrowAddress": "Address of the Escrow Wallet"
        },
        "returns": {
          "_tokenIds": "Array of Token IDs"
        }
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "can be used by other contracts to get royaltyInfo",
        "params": {
          "_salePrice": "Desired Sale Price of the token to run calculations on",
          "_tokenID": "Token ID of which royaltyInfo is to be fetched"
        },
        "returns": {
          "receiver": "Address of the receiver of the royalties",
          "royaltyAmount": "Royalty Amount"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "sendERC20ToBeneficiary(address,uint256)": {
        "details": "Sends ERC20 tokens the Contract might own, to the Beneficiary",
        "params": {
          "_erc20address": "Address of the ERC20 Contract",
          "_tokenAmount": "Token Amount you think the Contract has, that you want to send to the Beneficiary"
        },
        "returns": {
          "_success": "Whether the transaction was successful or not"
        }
      },
      "sendERC721ToBeneficiary(address,uint256)": {
        "details": "Sends ERC721 tokens the Contract might own, to the Beneficiary",
        "params": {
          "_erc721address": "Address of the ERC721 Contract",
          "_tokenId": "ID of the Token you wish to send to the Beneficiary."
        },
        "returns": {
          "_success": "Whether the transaction was successful or not"
        }
      },
      "sendToBeneficiary(uint256)": {
        "details": "Sends Wei the Contract might own, to the Beneficiary",
        "params": {
          "_amountInWei": "Amount in Wei you think the Contract has, that you want to send to the Beneficiary"
        },
        "returns": {
          "_success": "Whether the transaction was successful or not"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "signContract(address)": {
        "params": {
          "_escrowWalletAddress": "Address of the Escrow Wallet associated to the contract that you want to sign"
        },
        "returns": {
          "_tokenId": "Token ID of the NFT created"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "Judiciary Contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "changeFeesPermyriad(uint8)": {
        "notice": "For the owner to change the fees (fees can never exceed 2.55%, range: 0-255)"
      },
      "changeTreasuryAddress(address)": {
        "notice": "For the owner to change the treasuryAddress"
      },
      "constructor": {
        "notice": "Constructor function for the Judiciary Contract"
      },
      "createContract(string,address[],address)": {
        "notice": "Create a new Judiciary Contract"
      },
      "fetchEscrowAddressesBySignerAddress(address)": {
        "notice": "returns escrowAddresses for the given signerAddress"
      },
      "fetchTokenIdsByEscrowAddress(address)": {
        "notice": "returns tokenIds for the given escrowAddress"
      },
      "fund()": {
        "notice": "To pay the contract"
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "returns royalties info for the given Token ID"
      },
      "sendERC20ToBeneficiary(address,uint256)": {
        "notice": "So the Admins can maintain control over all the Tokens this NFT Contract might accidentally own in future (to refund lost tokens, etc.)"
      },
      "sendERC721ToBeneficiary(address,uint256)": {
        "notice": "So the Admins can maintain control over all the ERC721 Tokens this NFT Contract might accidentally own in future (to refund lost NFTs, etc.)"
      },
      "sendToBeneficiary(uint256)": {
        "notice": "So the Admins can maintain control over all the Funds this NFT Contract might accidentally own in future (to refund lost funds, etc.)"
      },
      "signContract(address)": {
        "notice": "Sign a Judiciary Contract"
      }
    },
    "notice": "This contract shall be the prime Judiciary NFT contract for creation of contracts in the Metaverse!",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 876,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 878,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 882,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 886,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 890,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 896,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1944,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1948,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1951,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1955,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 533,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 5776,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "baseURI",
        "offset": 0,
        "slot": "11",
        "type": "t_string_storage"
      },
      {
        "astId": 5805,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_contractURI",
        "offset": 0,
        "slot": "12",
        "type": "t_string_storage"
      },
      {
        "astId": 5845,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5057,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "escrowContractAddress",
        "offset": 0,
        "slot": "14",
        "type": "t_address"
      },
      {
        "astId": 5060,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "allEscrows",
        "offset": 0,
        "slot": "15",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 729,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "_status",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5237,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "treasuryAddress",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 5240,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "feesPermyriad",
        "offset": 20,
        "slot": "17",
        "type": "t_uint8"
      },
      {
        "astId": 5247,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "totalTokensMinted",
        "offset": 0,
        "slot": "18",
        "type": "t_struct(Counter)2699_storage"
      },
      {
        "astId": 5252,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "getTokenIdsByEscrowAddress",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 5256,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "getEscrowAddressByTokenId",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5260,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "getContractSignerByTokenId",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5265,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "getEscrowAddressesBySignerAddress",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 5271,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "hasSignedContract",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 5309,
        "contract": "contracts/Judiciary.sol:Judiciary",
        "label": "getRoyaltyInfoByTokenId",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_uint256,t_struct(RoyaltyInfo)5304_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(RoyaltyInfo)5304_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Judiciary.RoyaltyInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(RoyaltyInfo)5304_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)2699_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 2698,
            "contract": "contracts/Judiciary.sol:Judiciary",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(RoyaltyInfo)5304_storage": {
        "encoding": "inplace",
        "label": "struct Judiciary.RoyaltyInfo",
        "members": [
          {
            "astId": 5301,
            "contract": "contracts/Judiciary.sol:Judiciary",
            "label": "receiver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5303,
            "contract": "contracts/Judiciary.sol:Judiciary",
            "label": "percent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}